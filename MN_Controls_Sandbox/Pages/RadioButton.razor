@page "/mn-radiobutton"
@using MN_Controls_Sandbox.Class
@using MN_RadioButton_Control

<h2>Radio button</h2>

<h3>Zmienne css</h3>

Poniżej znajduje się sekcja styli ze zmiennymi css udostępnianymi przez kontrolkę. Zmieniając wartości, kontrolka automatycznie dostosuje zmiany do wyglądu.

<style contenteditable class="editable-style-section">
    :root {
        --mn_checkbox-border-focus-radius: 4px;
        --mn_checkbox-border-radius: 2px;
        --mn_checkbox-border-focus-width: 2px;
        --mn_checkbox-border-width: 1px;
        --mn_checkbox-black: #000000;
        --mn_checkbox-font-family: Arial;
        --mn_checkbox-font-size: 16px;
        --mn_checkbox-gap: 12px;
        --mn_checkbox-size: 25px;
        --mn_checkbox-border-color-focus: green;
    }
</style>
<br/>
<h2>Wygląd kontrolki</h2>

<MN_RadioButton @bind-RadioButtonValue="radioButtonValue" ItemsList="radioButtonValueList">
    <ContentList Context="context">
        @context.RandomField1, @context.RandomField2, @context.RandomField3
    </ContentList>
</MN_RadioButton>
aktualna wartość: @radioButtonValue.RandomField1 @radioButtonValue.RandomField2 @radioButtonValue.RandomField3

<br />
<br />
<h2>Parametryzacja</h2>
<span style="font-weight: bold;">bind-RadioButtonValue</span>: zmienna ustawiająca oraz przechowująca wartość kontrolki
<br />
<span style="font-weight: bold;">ItemsList</span>: Wartości wyświetlane na liście
<br />
<span style="font-weight: bold;">znacznik ContentList</span>: Sposób wyświetlania elementu na liście
<br />
<br />
<h3>Użycie w kodzie</h3>
@componentUsage
<br />
<br />
<h3>Opis działania</h3>
Kontrolka opiera się na mechanizmach renderowania fragmentu widoku w ContentList oraz ContentList.
<br />
Dla każdego elementu generowany jest osobny checkbox z własnym sposobem wyświetlania

@code {
    private RandomClass radioButtonValue { get; set; }
    private List<RandomClass> radioButtonValueList { get; set; }

    public string componentUsage { get; set; } = @"
                                                <MN_RadioButton @bind-RadioButtonValue=""radioButtonValue"" ItemsList=""radioButtonValueList"">
                                                    <ContentList Context=""context"">
                                                        @context.RandomField1, @context.RandomField2, @context.RandomField3
                                                    </ContentList>
                                                </MN_RadioButton>";

    protected override Task OnInitializedAsync()
    {
        radioButtonValue = new RandomClass();
        radioButtonValueList = generateTestList();

        return base.OnInitializedAsync();
    }

    private List<RandomClass> generateTestList()
    {
        var testList = new List<RandomClass>();
        for (int i =0; i < 5; i++)
        {
            testList.Add(getNewTestItem());
        }

        return testList;
    }

    private RandomClass getNewTestItem()
    {
        var rnd  = new Random();
        var x = rnd.Next();
        return new RandomClass()
            {
                RandomField1 = $"Name {x}",
                RandomField2 = $"SurName {x}",
                RandomField3 = x.ToString()
            };
    }
}